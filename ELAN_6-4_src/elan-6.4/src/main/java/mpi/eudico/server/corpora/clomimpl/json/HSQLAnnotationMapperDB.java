package mpi.eudico.server.corpora.clomimpl.json;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.sql.Timestamp;
import java.time.LocalDateTime;
import javax.swing.table.DefaultTableModel;

import mpi.eudico.server.corpora.clom.Annotation;
import mpi.eudico.server.corpora.clom.Tier;
import mpi.eudico.server.corpora.clom.Transcription;
import static mpi.eudico.server.corpora.util.ServerLogger.LOG;

/**
 * HSQLAnnotationMapperDB to carry out the database operations.
 * like creating the tables, inserting the Ids generated by the annotation server
 */
public class HSQLAnnotationMapperDB {

	private Connection connection;

	private int valueVarchar = 512;

	private Integer generatedCollectionID;

	/**
	 * method to create the database schema and tables in HSQL database
	 * 
	 */
	public void createDatabaseTables() {
		

		String createSchema = "CREATE SCHEMA IF NOT EXISTS WA_MAPPER AUTHORIZATION DBA";
		/*
		 * create annotation table
		 */
		String createACTable = String.format(
				"CREATE TABLE IF NOT EXISTS annotation_collection (id INTEGER GENERATED BY DEFAULT AS IDENTITY(START WITH 1, INCREMENT BY 1) PRIMARY KEY, elan_tier_id VARCHAR(%d) NOT NULL, "
						+ "urn VARCHAR(%d) NOT NULL, wa_collection_id VARCHAR(%d) NOT NULL, createdDate TIMESTAMP NOT NULL)",
				valueVarchar, valueVarchar, valueVarchar);

		/**
		 * create annotation table
		 */
		String createAnnotationTable = String.format(
				"CREATE TABLE IF NOT EXISTS annotation (id INTEGER GENERATED BY DEFAULT AS IDENTITY(START WITH 1, INCREMENT BY 1) PRIMARY KEY, elan_annotation_id VARCHAR(%d) NOT NULL,"
						+ "wa_annotation_id VARCHAR(%d) NOT NULL, annotation_collection_id INTEGER NOT NULL, createdDate TIMESTAMP NOT NULL)",
				valueVarchar, valueVarchar);

		String addForeignKeyConstraint = "ALTER TABLE annotation "
				+ "ADD CONSTRAINT IF NOT EXISTS FK_AC_ID FOREIGN KEY(annotation_collection_id) REFERENCES annotation_collection(id)";

		Statement statement = null;
		try {

			connection = DBConnection.getDBConnection();

			if (connection != null) {

				statement = connection.createStatement();

				statement.executeUpdate(createSchema);
				statement.executeUpdate(createACTable);
				statement.executeUpdate(createAnnotationTable);
				statement.executeUpdate(addForeignKeyConstraint);

			} else {
				LOG.warning("Connection not estabilished with database");
			}

		} catch (SQLException e) {
			LOG.severe("HSQLDBQuery create tables SQLException: " + e);
		}finally {
			try {
				if (statement != null) {
					statement.close();
				}
			} catch (SQLException e) {
				LOG.warning( "Error when closing the statement");
			}
		}

	}

	/**
	 * Inserts collectionId in the database
	 * @param transcription
	 * @param tier
	 * @param collectionID
	 */
	public void saveCollectionIDinDB(Transcription transcription, Tier tier, String collectionID) {
		PreparedStatement statementCollection = null;
		ResultSet rs = null;
		String query = "INSERT INTO annotation_collection (elan_tier_id, urn ,wa_collection_id,createdDate) VALUES (?, ?, ?, ?)";

		try {
			connection = DBConnection.getDBConnection();
			if (connection != null) {
				statementCollection = connection.prepareStatement(query, Statement.RETURN_GENERATED_KEYS);
				statementCollection.setString(1, tier.getName());
				statementCollection.setString(2, transcription.getURN().toString());
				statementCollection.setString(3, collectionID);
				statementCollection.setTimestamp(4, Timestamp.valueOf(LocalDateTime.now().withNano(0)));

				statementCollection.executeUpdate();

				rs = statementCollection.getGeneratedKeys();
				rs.next();
				generatedCollectionID = rs.getInt(1);

			} else {
				LOG.warning("Connection not estabilished with database");
			}
			if (statementCollection != null) {
				statementCollection.close();
			}
			if (rs != null) {
				rs.close();
			}

		} catch (SQLException e) {
			LOG.warning("SQLException while inserting into hsql annotation_collection table " + e);
		}
	}

	
	/**
	 * Inserts annotationId in the database
	 * @param transcription
	 * @param annotation
	 * @param AnnotationID
	 * @param collectionID
	 */
	public void saveAnnotationIDinDB(Transcription transcription, Annotation annotation, String AnnotationID,
			String collectionID) {
		PreparedStatement statementAnnotation = null;

		try {
			connection = DBConnection.getDBConnection();
			if (connection != null) {
				statementAnnotation = connection.prepareStatement(
						"INSERT INTO annotation (elan_annotation_id, wa_annotation_id, annotation_collection_id,createdDate) VALUES (?,?,?,?)");
				statementAnnotation.setString(1, annotation.getId());
				statementAnnotation.setString(2, AnnotationID);
				statementAnnotation.setInt(3, generatedCollectionID);
				statementAnnotation.setTimestamp(4, Timestamp.valueOf(LocalDateTime.now().withNano(0)));

				statementAnnotation.executeUpdate();

				
			} else {
				LOG.warning( "Connection not estabilished with database");
			}
			
			if (statementAnnotation != null) {
				statementAnnotation.close();
			}

		} catch (SQLException e) {
			LOG.warning( "SQLException while inserting into hsql annotation table " + e);
		}

	}
	
	/**
	 * fetches tier, collectionID and createdDate from the annotation_collection table
	 * @param transcription
	 * @param model
	 * @return boolean value which determines if list is present or not 
	 */
	public Boolean getCollectionIDsFromDB(Transcription transcription, DefaultTableModel model) {
		Boolean isListPresent = false;
		
		String urn = transcription.getURN().toString();
		if (urn == null || urn.isEmpty()) {
			return isListPresent;
		}
		
		PreparedStatement statement = null;
		ResultSet rs = null;
		try {
			connection = DBConnection.getDBConnection();
			if (connection != null) {
				
				statement = connection.prepareStatement("SELECT elan_tier_id, wa_collection_id, createddate FROM annotation_collection where urn=? order by elan_tier_id,createddate");
				statement.setString(1, urn);
				rs = statement.executeQuery();
				String previousTier = "";
				
				while (rs.next()) {
					isListPresent = true;
					String currentTier = rs.getString("elan_tier_id");
					if (currentTier.equals(previousTier)) {
						model.addRow(new Object[] { "", rs.getString("wa_collection_id"), rs.getString("createddate") });
					} else {
						previousTier = currentTier;
						model.addRow(new Object[] { currentTier, rs.getString("wa_collection_id"),rs.getString("createddate") });
					}
				}
			}
			
			if (statement != null) {
				statement.close();
			}
			if (rs != null) {
				rs.close();
			}
		 
		} catch (SQLException e) {
			LOG.warning( "SQLException with select query on annotation_collection table " + e);
		}
		
		PreparedStatement closeStatement;
		try {
			closeStatement = connection.prepareStatement("SHUTDOWN");
			closeStatement.execute();
		} catch (SQLException e) {
			LOG.warning( "SQLException with shutdown query " + e);
		}
		DBConnection.closeDBConnection();
		return isListPresent;

	}

}
